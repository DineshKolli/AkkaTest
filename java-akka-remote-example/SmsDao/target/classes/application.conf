akka {
  loglevel = ERROR
  #loggers = ["akka.event.jul.JavaLogger"]
  #logging-filter = "akka.event.jul.JavaLoggingFilter"
}

akka {
  actor {
    #provider = "akka.remote.RemoteActorRefProvider"
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }


cluster {
      # Note - Artery uses akka:// addresses
      seed-nodes = [
                    "akka.tcp://SmsDaoCluster@127.0.0.1:2900"]
      use-role = backend
      auto-down-unreachable-after = 10s
    }
  }

# Enable metrics extension in akka-cluster-metrics.
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]
akka.cluster.jmx.multi-mbeans-in-same-jvm = on

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native




database {
  slick-h2 {
    profile = "slick.jdbc.H2Profile$"
    db {
      connectionPool = disabled
      dataSourceClass = "slick.jdbc.DriverDataSource"
      properties = {
        driver = "org.h2.Driver"
        #url = "jdbc:h2:/root/dinesh/alpakka-slick-h2-test;AUTO_SERVER=TRUE"
        url = "jdbc:h2:D:/Project/Akka/alpakka-slick-h2-test;AUTO_SERVER=TRUE"
      }
    }
  }

  slick-postgres {
    profile = "slick.jdbc.PostgresProfile$"
    db {
      #connectionPool = HikariCP
      #dataSourceClass = "slick.jdbc.DriverDataSource"
      dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
      connectionPool = "HikariCP"
      properties = {
        driver = "org.postgresql.Driver"
        url = "jdbc:postgresql://127.0.0.1:543/testdb"
        user = "postgres"
        password = "password"
      }
      numThreads = 25
      #maxConnections = 10
    }
  }

}

my-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 10
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 25
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

my-dispatcher-pool {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    executor = "thread-pool-executor"

    thread-pool-executor {
      core-pool-size-min = 8

      core-pool-size-max = 64

      max-pool-size-min = 100

      max-pool-size-max = 200

      task-queue-size = 20
    }

}
